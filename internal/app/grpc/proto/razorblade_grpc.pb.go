// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: razorblade.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RazorbladeServiceClient is the client API for RazorbladeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RazorbladeServiceClient interface {
	GetOriginalURL(ctx context.Context, in *GetOriginalURLRequest, opts ...grpc.CallOption) (*GetOriginalURLResponse, error)
	ListURLsByUserID(ctx context.Context, in *ListURLsByUserIDRequest, opts ...grpc.CallOption) (*ListURLsByUserIDResponse, error)
	CreateShortURL(ctx context.Context, in *CreateShortURLRequest, opts ...grpc.CallOption) (*CreateShortURLResponse, error)
	DeleteShortURLs(ctx context.Context, in *DeleteShortURLsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type razorbladeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRazorbladeServiceClient(cc grpc.ClientConnInterface) RazorbladeServiceClient {
	return &razorbladeServiceClient{cc}
}

func (c *razorbladeServiceClient) GetOriginalURL(ctx context.Context, in *GetOriginalURLRequest, opts ...grpc.CallOption) (*GetOriginalURLResponse, error) {
	out := new(GetOriginalURLResponse)
	err := c.cc.Invoke(ctx, "/razorblade.RazorbladeService/GetOriginalURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *razorbladeServiceClient) ListURLsByUserID(ctx context.Context, in *ListURLsByUserIDRequest, opts ...grpc.CallOption) (*ListURLsByUserIDResponse, error) {
	out := new(ListURLsByUserIDResponse)
	err := c.cc.Invoke(ctx, "/razorblade.RazorbladeService/ListURLsByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *razorbladeServiceClient) CreateShortURL(ctx context.Context, in *CreateShortURLRequest, opts ...grpc.CallOption) (*CreateShortURLResponse, error) {
	out := new(CreateShortURLResponse)
	err := c.cc.Invoke(ctx, "/razorblade.RazorbladeService/CreateShortURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *razorbladeServiceClient) DeleteShortURLs(ctx context.Context, in *DeleteShortURLsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/razorblade.RazorbladeService/DeleteShortURLs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RazorbladeServiceServer is the server API for RazorbladeService service.
// All implementations must embed UnimplementedRazorbladeServiceServer
// for forward compatibility
type RazorbladeServiceServer interface {
	GetOriginalURL(context.Context, *GetOriginalURLRequest) (*GetOriginalURLResponse, error)
	ListURLsByUserID(context.Context, *ListURLsByUserIDRequest) (*ListURLsByUserIDResponse, error)
	CreateShortURL(context.Context, *CreateShortURLRequest) (*CreateShortURLResponse, error)
	DeleteShortURLs(context.Context, *DeleteShortURLsRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedRazorbladeServiceServer()
}

// UnimplementedRazorbladeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRazorbladeServiceServer struct {
}

func (UnimplementedRazorbladeServiceServer) GetOriginalURL(context.Context, *GetOriginalURLRequest) (*GetOriginalURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOriginalURL not implemented")
}
func (UnimplementedRazorbladeServiceServer) ListURLsByUserID(context.Context, *ListURLsByUserIDRequest) (*ListURLsByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListURLsByUserID not implemented")
}
func (UnimplementedRazorbladeServiceServer) CreateShortURL(context.Context, *CreateShortURLRequest) (*CreateShortURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortURL not implemented")
}
func (UnimplementedRazorbladeServiceServer) DeleteShortURLs(context.Context, *DeleteShortURLsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShortURLs not implemented")
}
func (UnimplementedRazorbladeServiceServer) mustEmbedUnimplementedRazorbladeServiceServer() {}

// UnsafeRazorbladeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RazorbladeServiceServer will
// result in compilation errors.
type UnsafeRazorbladeServiceServer interface {
	mustEmbedUnimplementedRazorbladeServiceServer()
}

func RegisterRazorbladeServiceServer(s grpc.ServiceRegistrar, srv RazorbladeServiceServer) {
	s.RegisterService(&RazorbladeService_ServiceDesc, srv)
}

func _RazorbladeService_GetOriginalURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOriginalURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RazorbladeServiceServer).GetOriginalURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/razorblade.RazorbladeService/GetOriginalURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RazorbladeServiceServer).GetOriginalURL(ctx, req.(*GetOriginalURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RazorbladeService_ListURLsByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListURLsByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RazorbladeServiceServer).ListURLsByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/razorblade.RazorbladeService/ListURLsByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RazorbladeServiceServer).ListURLsByUserID(ctx, req.(*ListURLsByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RazorbladeService_CreateShortURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RazorbladeServiceServer).CreateShortURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/razorblade.RazorbladeService/CreateShortURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RazorbladeServiceServer).CreateShortURL(ctx, req.(*CreateShortURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RazorbladeService_DeleteShortURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShortURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RazorbladeServiceServer).DeleteShortURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/razorblade.RazorbladeService/DeleteShortURLs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RazorbladeServiceServer).DeleteShortURLs(ctx, req.(*DeleteShortURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RazorbladeService_ServiceDesc is the grpc.ServiceDesc for RazorbladeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RazorbladeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "razorblade.RazorbladeService",
	HandlerType: (*RazorbladeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOriginalURL",
			Handler:    _RazorbladeService_GetOriginalURL_Handler,
		},
		{
			MethodName: "ListURLsByUserID",
			Handler:    _RazorbladeService_ListURLsByUserID_Handler,
		},
		{
			MethodName: "CreateShortURL",
			Handler:    _RazorbladeService_CreateShortURL_Handler,
		},
		{
			MethodName: "DeleteShortURLs",
			Handler:    _RazorbladeService_DeleteShortURLs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "razorblade.proto",
}
